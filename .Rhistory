ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel(
headerPanel("Linear Transformations")
),
withMathJax(),
sidebarLayout(
sidebarPanel(
radioButtons(
"dimension",
label = "Choose number of dimensions",
choices = c("2D", "3D"),
selected = "2D"
),
matrixInput(
"transform_mat",
label = "Input the transformation matrix",
value = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
rows = list(names = FALSE),
cols = list(names = FALSE),
class = "numeric",
copy = TRUE,
paste = TRUE
)
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",  plotlyOutput("plot")),
tabPanel("Determinant", uiOutput("determinant")),
tabPanel("Inverse Matrix", uiOutput("inverse_matrix")),
tabPanel("Column Space", uiOutput("column_space")),
tabPanel("Null Space", uiOutput("null_space"))
)
)
)
)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(matrix2latex(input$transform_mat))
)
})
}
# Run shiny application
shinyApp(ui, server)
# Create user interface
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel(
headerPanel("Linear Transformations")
),
withMathJax(),
sidebarLayout(
sidebarPanel(
radioButtons(
"dimension",
label = "Choose number of dimensions",
choices = c("2D", "3D"),
selected = "2D"
),
matrixInput(
"transform_mat",
label = "Input the transformation matrix",
value = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
rows = list(names = FALSE),
cols = list(names = FALSE),
class = "numeric",
copy = TRUE,
paste = TRUE
)
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",  plotlyOutput("plot")),
tabPanel("Determinant", uiOutput("determinant")),
tabPanel("Inverse Matrix", uiOutput("inverse_matrix")),
tabPanel("Column Space", uiOutput("column_space")),
tabPanel("Null Space", uiOutput("null_space"))
)
)
)
)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(matrix2latex(input$transform_mat))
)
})
}
# Run shiny application
shinyApp(ui, server)
source("utils.R")
# Create user interface
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel(
headerPanel("Linear Transformations")
),
withMathJax(),
sidebarLayout(
sidebarPanel(
radioButtons(
"dimension",
label = "Choose number of dimensions",
choices = c("2D", "3D"),
selected = "2D"
),
matrixInput(
"transform_mat",
label = "Input the transformation matrix",
value = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
rows = list(names = FALSE),
cols = list(names = FALSE),
class = "numeric",
copy = TRUE,
paste = TRUE
)
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",  plotlyOutput("plot")),
tabPanel("Determinant", uiOutput("determinant")),
tabPanel("Inverse Matrix", uiOutput("inverse_matrix")),
tabPanel("Column Space", uiOutput("column_space")),
tabPanel("Null Space", uiOutput("null_space"))
)
)
)
)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(matrix2latex(input$transform_mat))
)
})
}
# Run shiny application
shinyApp(ui, server)
det(mat)
matrix2latex()
matrix2latex
string
source("utils.R")
# Create user interface
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel(
headerPanel("Linear Transformations")
),
withMathJax(),
sidebarLayout(
sidebarPanel(
radioButtons(
"dimension",
label = "Choose number of dimensions",
choices = c("2D", "3D"),
selected = "2D"
),
matrixInput(
"transform_mat",
label = "Input the transformation matrix",
value = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
rows = list(names = FALSE),
cols = list(names = FALSE),
class = "numeric",
copy = TRUE,
paste = TRUE
)
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",  plotlyOutput("plot")),
tabPanel("Determinant", uiOutput("determinant")),
tabPanel("Inverse Matrix", uiOutput("inverse_matrix")),
tabPanel("Column Space", uiOutput("column_space")),
tabPanel("Null Space", uiOutput("null_space"))
)
)
)
)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(str_c("$$det(A)=", matrix2latex(input$transform_mat), "$$", sep = ""))
)
})
}
# Run shiny application
shinyApp(ui, server)
# Source script
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
source("utils.R")
# Create user interface
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel(
headerPanel("Linear Transformations")
),
withMathJax(),
sidebarLayout(
sidebarPanel(
radioButtons(
"dimension",
label = "Choose number of dimensions",
choices = c("2D", "3D"),
selected = "2D"
),
matrixInput(
"transform_mat",
label = "Input the transformation matrix",
value = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
rows = list(names = FALSE),
cols = list(names = FALSE),
class = "numeric",
copy = TRUE,
paste = TRUE
)
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",  plotlyOutput("plot")),
tabPanel("Determinant", uiOutput("determinant")),
tabPanel("Inverse Matrix", uiOutput("inverse_matrix")),
tabPanel("Column Space", uiOutput("column_space")),
tabPanel("Null Space", uiOutput("null_space"))
)
)
)
)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(matrix2latex(input$transform_mat))
)
})
}
# Run shiny application
shinyApp(ui, server)
# Run shiny application
shinyApp(ui, server)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(write_determinant(input$transform_mat))
)
})
}
# Run shiny application
shinyApp(ui, server)
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
source("utils.R")
# Create user interface
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel(
headerPanel("Linear Transformations")
),
withMathJax(),
sidebarLayout(
sidebarPanel(
radioButtons(
"dimension",
label = "Choose number of dimensions",
choices = c("2D", "3D"),
selected = "2D"
),
matrixInput(
"transform_mat",
label = "Input the transformation matrix",
value = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
rows = list(names = FALSE),
cols = list(names = FALSE),
class = "numeric",
copy = TRUE,
paste = TRUE
)
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",  plotlyOutput("plot")),
tabPanel("Determinant", uiOutput("determinant")),
tabPanel("Inverse Matrix", uiOutput("inverse_matrix")),
tabPanel("System Equations", uiOutput("system_equations")),
tabPanel("Null Space", uiOutput("null_space"))
)
)
)
)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(write_determinant(input$transform_mat))
)
})
}
# Run shiny application
shinyApp(ui, server)
# Source script
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
source("utils.R")
# Create user interface
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel(
headerPanel("Linear Transformations")
),
withMathJax(),
sidebarLayout(
sidebarPanel(
radioButtons(
"dimension",
label = "Choose number of dimensions",
choices = c("2D", "3D"),
selected = "2D"
),
matrixInput(
"transform_mat",
label = "Input the transformation matrix",
value = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
rows = list(names = FALSE),
cols = list(names = FALSE),
class = "numeric",
copy = TRUE,
paste = TRUE
)
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",  plotlyOutput("plot")),
tabPanel("Null Space", uiOutput("null_space")),
tabPanel("Determinant", uiOutput("determinant")),
tabPanel("Inverse Matrix", uiOutput("inverse_matrix"))
)
)
)
)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(write_determinant(input$transform_mat))
)
})
}
# Run shiny application
shinyApp(ui, server)
