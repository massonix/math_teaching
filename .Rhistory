intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
input_matrix <- matrix(
c(c(0, 0, 1, 1, 0, 0, 1, 1), c(0, 1, 1, 0, 0, 1, 1, 0), c(0, 0, 0, 0, 1, 1, 1, 1)),
nrow = 3,
ncol = 8,
byrow = TRUE
)
input_matrix
A <- matrix(
c(c(0, 0, 1, 1, 0, 0, 1, 1), c(0, 1, 1, 0, 0, 1, 1, 0), c(0, 0, 0, 0, 1, 1, 1, 1)),
nrow = 3,
ncol = 8,
byrow = TRUE
)
transformation_matrix <- matrix(c(2, 0, 0, 0, 2, 0, 0, 0, 2), 3, 3, byrow = TRUE)
output_matrix <- transformation_matrix %*% input_matrix
output_matrix
input_df <- as.data.frame(t(input_matrix))
input_df
output_df <- as.data.frame(t(output_matrix))
output_df
colnames(output_df) <- c("x", "y", "z")
df <- bind_rows(list(input = input_df, output = output_df), .id = "status")
library(dplyr)
df <- bind_rows(list(input = input_df, output = output_df), .id = "status")
df
input_matrix <- matrix(
c(c(0, 0, 1, 1, 0, 0, 1, 1), c(0, 1, 1, 0, 0, 1, 1, 0), c(0, 0, 0, 0, 1, 1, 1, 1)),
nrow = 3,
ncol = 8,
byrow = TRUE
)
transformation_matrix <- matrix(c(2, 0, 0, 0, 2, 0, 0, 0, 2), 3, 3, byrow = TRUE)
output_matrix <- transformation_matrix %*% input_matrix
input_df <- as.data.frame(t(input_matrix))
colnames(input_df) <- c("x", "y", "z")
output_df <- as.data.frame(t(output_matrix))
colnames(output_df) <- c("x", "y", "z")
df <- bind_rows(list(input = input_df, output = output_df), .id = "status")
df
df$i <- rep(c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2), 2)
input_df
df %>%
filter(status == "input") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6)
)
df %>%
df %>%
filter(status == "input") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
library(plotly)
library(dplyr)
input_matrix <- matrix(
c(c(0, 0, 1, 1, 0, 0, 1, 1), c(0, 1, 1, 0, 0, 1, 1, 0), c(0, 0, 0, 0, 1, 1, 1, 1)),
nrow = 3,
ncol = 8,
byrow = TRUE
)
transformation_matrix <- matrix(c(2, 0, 0, 0, 2, 0, 0, 0, 2), 3, 3, byrow = TRUE)
output_matrix <- transformation_matrix %*% input_matrix
input_df <- as.data.frame(t(input_matrix))
colnames(input_df) <- c("x", "y", "z")
output_df <- as.data.frame(t(output_matrix))
colnames(output_df) <- c("x", "y", "z")
df <- bind_rows(list(input = input_df, output = output_df), .id = "status")
df %>%
filter(status == "input") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
transformation_matrix <- matrix(c(2, 2, 0, 0, 2, 0, 0, 0, 2), 3, 3, byrow = TRUE)
output_matrix <- transformation_matrix %*% input_matrix
input_df <- as.data.frame(t(input_matrix))
colnames(input_df) <- c("x", "y", "z")
output_df <- as.data.frame(t(output_matrix))
colnames(output_df) <- c("x", "y", "z")
df <- bind_rows(list(input = input_df, output = output_df), .id = "status")
df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
transformation_matrix <- matrix(c(2, 2, 2, 8, 8, 8, 0, 0, 2), 3, 3, byrow = TRUE)
output_matrix <- transformation_matrix %*% input_matrix
input_df <- as.data.frame(t(input_matrix))
colnames(input_df) <- c("x", "y", "z")
output_df <- as.data.frame(t(output_matrix))
colnames(output_df) <- c("x", "y", "z")
df <- bind_rows(list(input = input_df, output = output_df), .id = "status")
df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
transformation_matrix <- matrix(c(2, 2, 2, 8, 8, 8, 16, 16, 16), 3, 3, byrow = TRUE)
output_matrix <- transformation_matrix %*% input_matrix
input_df <- as.data.frame(t(input_matrix))
colnames(input_df) <- c("x", "y", "z")
output_df <- as.data.frame(t(output_matrix))
colnames(output_df) <- c("x", "y", "z")
df <- bind_rows(list(input = input_df, output = output_df), .id = "status")
df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
df %>%
# filter(status == "output") %>%
group_by(status) %>%
do(ploty = plot_ly(data = ., x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
) %>%
subplot(nrows = 2)
library(purrr)
plots <- map(c("input", "output"), function(x) {
df %>%
filter(status == x) %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
})
subplot(plots[[1]], plots[[2]])
names(plots) <- c("input", "output")
plots <- map(c("input", "output"), function(x) {
df %>%
filter(status == x) %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
})
names(plots) <- c("input", "output")
plots <- map(list(input_df, output_df), function(x) {
df %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
})
names(plots) <- c("input", "output")
plots$input
plots$output
df <- bind_rows(list(input = input_df, output = output_df), .id = "status")
df <- bind_rows(list(input = input_df, output = output_df), .id = "status")
df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
transformation_matrix <- matrix(c(2, 0, 0, 0, 2, 0, 0, 0, 2), 3, 3, byrow = TRUE)
output_matrix <- transformation_matrix %*% input_matrix
input_df <- as.data.frame(t(input_matrix))
colnames(input_df) <- c("x", "y", "z")
output_df <- as.data.frame(t(output_matrix))
colnames(output_df) <- c("x", "y", "z")
df <- bind_rows(list(input = input_df, output = output_df), .id = "status")
df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
)
df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
) %>%
layout(
xaxis = list(range = c(0, 2)),
yaxis = list(range = c(0, 2)),
zaxis = list(range = c(0, 2))
)
df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
) %>%
layout(
xaxis = list(range = c(0, 4)),
yaxis = list(range = c(0, 4)),
zaxis = list(range = c(0, 4))
)
axx <- list(nticks = 4, range = c(0, 2))
axy <- list(nticks = 4, range = c(0, 2))
axz <- list(nticks = 4, range = c(0, 2))
df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
) %>%
layout(scene = list(xaxis = axx, yaxis = axy, zaxis = axz))
axx <- list(nticks = 4, range = c(0, 4))
axy <- list(nticks = 4, range = c(0, 4))
axz <- list(nticks = 4, range = c(0, 4))
df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
) %>%
layout(scene = list(xaxis = axx, yaxis = axy, zaxis = axz))
axx <- list(nticks = 6, range = c(0, 4))
axy <- list(nticks = 6, range = c(0, 4))
axz <- list(nticks = 6, range = c(0, 4))
df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y, z = ~z) %>%
add_mesh(
i = c(7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2),
j = c(3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3),
k = c(0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6),
intensity = seq(0, 1, length = 8),
color = seq(0, 1, length = 8),
colors = colorRamp(rainbow(8))
) %>%
layout(scene = list(xaxis = axx, yaxis = axy, zaxis = axz))
######
#####2D#######
input_matrix <- matrix(
c(c(0, 1, 1, 0), c(0, 0, 1, 1)),
nrow = 2,
ncol = 4,
byrow = TRUE
)
input_matrix
input_matrix <- matrix(
c(c(0, 1, 1, 0), c(0, 0, 1, 1)),
nrow = 2,
ncol = 4,
byrow = TRUE
)
transformation_matrix <- matrix(c(2, 0, 0, 2), 2, 2, byrow = TRUE)
output_matrix <- transformation_matrix %*% input_matrix
output_matrix
input_df <- as.data.frame(t(input_matrix))
colnames(input_df) <- c("x", "y")
output_df <- as.data.frame(t(output_matrix))
colnames(output_df) <- c("x", "y")
output_matrix
output_df
df <- bind_rows(list(input = input_df, output = output_df), .id = "status")
input_matrix <- matrix(
c(c(0, 1, 1, 0), c(0, 0, 1, 1)),
nrow = 2,
ncol = 4,
byrow = TRUE
)
transformation_matrix <- matrix(c(2, 0, 0, 2), 2, 2, byrow = TRUE)
output_matrix <- transformation_matrix %*% input_matrix
input_df <- as.data.frame(t(input_matrix))
colnames(input_df) <- c("x", "y")
output_df <- as.data.frame(t(output_matrix))
colnames(output_df) <- c("x", "y")
df <- bind_rows(list(input = input_df, output = output_df), .id = "status")
p <- df %>%
filter(status == "output") %>%
plot_ly(x = ~x, y = ~y) %>%
add_trace(
type = 'scatter',
fill = 'toself',
fillcolor = '#ab63fa',
hoveron = 'points+fills',
marker = list(
color = '#ab63fa'
),
line = list(
color = '#ab63fa'
),
text = "Points + Fills",
hoverinfo = 'text'
)
p
p <- df %>%
filter(status == "input") %>%
plot_ly(x = ~x, y = ~y) %>%
add_trace(
type = 'scatter',
fill = 'toself',
fillcolor = '#ab63fa',
hoveron = 'points+fills',
marker = list(
color = '#ab63fa'
),
line = list(
color = '#ab63fa'
),
text = "Points + Fills",
hoverinfo = 'text'
)
p
# Run shiny application
shinyApp(ui, server)
# Load packages
library(plotly)
library(purrr)
library(dplyr)
library(stringr)
library(shiny)
library(shinythemes)
library(shinyMatrix)
library(xtable)
# Source script
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
source("utils.R")
# Create user interface
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel(
headerPanel("Linear Transformations")
),
withMathJax(),
sidebarLayout(
sidebarPanel(
radioButtons(
"dimension",
label = "Choose number of dimensions",
choices = c("2D", "3D"),
selected = "2D"
),
matrixInput(
"transform_mat",
label = "Input the transformation matrix",
value = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
rows = list(names = FALSE),
cols = list(names = FALSE),
class = "numeric",
copy = TRUE,
paste = TRUE
)
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",  plotlyOutput("plot")),
tabPanel("Null Space", verbatimTextOutput("null_space"), plotlyOutput("null_space_plot")),
tabPanel("Determinant", uiOutput("determinant")),
tabPanel("Inverse Matrix", verbatimTextOutput("inverse_matrix"))
)
)
)
)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(write_determinant(input$transform_mat, dimension = input$dimension))
)
})
output$null_space <- renderPrint({
compute_null_space(input$transform_mat)
})
output$null_space_plot <- renderPlotly({
if (input$dimension == "2D") {
plot_null_space_2d(input$transform_mat)
} else {
plot_null_space_3d(input$transform_mat)
}
})
output$inverse_matrix <- renderPrint({
find_inverse(input$transform_mat)
})
}
# Run shiny application
shinyApp(ui, server)
