L <- eventReactive(input$play, {
if (is.null(L)) {
input$transform_mat
} else {
apply_gauss_3d(L())
}
})
Ident <- eventReactive(input$play, {
if (is.null(Ident)) {
diag(as.integer(str_remove(input$dimension, "D")))
} else {
apply_gauss_3d(Ident())
}
})
output$gauss_matrix <- renderTable({
L()
}, colnames = FALSE)
output$gauss_identity <- renderTable({
Ident()
}, colnames = FALSE)
}
# Run shiny application
shinyApp(ui, server)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(write_determinant(input$transform_mat, dimension = input$dimension))
)
})
output$null_space <- renderPrint({
compute_null_space(input$transform_mat)
})
output$null_space_plot <- renderPlotly({
if (input$dimension == "2D") {
plot_null_space_2d(input$transform_mat)
} else {
plot_null_space_3d(input$transform_mat)
}
})
output$inverse_matrix <- renderPrint({
find_inverse(input$transform_mat)
})
output$gauss_matrix <- renderTable({
A <- input$transform_mat
}, colnames = FALSE)
output$gauss_identity <- renderTable({
I <- diag(as.integer(str_remove(input$dimension, "D")))
I
}, colnames = FALSE)
}
# Run shiny application
shinyApp(ui, server)
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(write_determinant(input$transform_mat, dimension = input$dimension))
)
})
output$null_space <- renderPrint({
compute_null_space(input$transform_mat)
})
output$null_space_plot <- renderPlotly({
if (input$dimension == "2D") {
plot_null_space_2d(input$transform_mat)
} else {
plot_null_space_3d(input$transform_mat)
}
})
output$inverse_matrix <- renderPrint({
find_inverse(input$transform_mat)
})
output$gauss_matrix <- renderTable({
if (is.null(A)) {
A <- input$transform_mat
} else {
A <- apply_gauss_3d(A)
}
A
}, colnames = FALSE)
output$gauss_identity <- renderTable({
I <- diag(as.integer(str_remove(input$dimension, "D")))
I
}, colnames = FALSE)
}
# Run shiny application
shinyApp(ui, server)
# Create user interface
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel(
headerPanel("Linear Transformations")
),
withMathJax(),
sidebarLayout(
sidebarPanel(
radioButtons(
"dimension",
label = "Choose number of dimensions",
choices = c("2D", "3D"),
selected = "2D"
),
matrixInput(
"transform_mat",
label = "Input the transformation matrix",
value = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
rows = list(names = FALSE),
cols = list(names = FALSE),
class = "numeric",
copy = TRUE,
paste = TRUE
)
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",  plotlyOutput("plot")),
tabPanel("Null Space", verbatimTextOutput("null_space"), plotlyOutput("null_space_plot")),
tabPanel("Determinant", uiOutput("determinant")),
tabPanel(
"Gauss-Jordan",
tableOutput("gauss_matrix"),
tableOutput("gauss_identity"),
actionButton("rewind", "", icon = icon("fast-backward")),
actionButton("play", "", icon = icon("play")),
actionButton("advance", "", icon = icon("fast-forward"))
)
)
)
)
)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(write_determinant(input$transform_mat, dimension = input$dimension))
)
})
output$null_space <- renderPrint({
compute_null_space(input$transform_mat)
})
output$null_space_plot <- renderPlotly({
if (input$dimension == "2D") {
plot_null_space_2d(input$transform_mat)
} else {
plot_null_space_3d(input$transform_mat)
}
})
output$inverse_matrix <- renderPrint({
find_inverse(input$transform_mat)
})
output$gauss_matrix <- renderTable({
A <- input$transform_mat
}, colnames = FALSE)
output$gauss_identity <- renderTable({
I <- diag(as.integer(str_remove(input$dimension, "D")))
I
}, colnames = FALSE)
}
# Run shiny application
shinyApp(ui, server)
# Load packages
library(plotly)
library(purrr)
library(dplyr)
library(stringr)
library(shiny)
library(shinythemes)
library(shinyMatrix)
library(xtable)
# Source script
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
source("utils.R")
# Create user interface
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel(
headerPanel("Linear Transformations")
),
withMathJax(),
sidebarLayout(
sidebarPanel(
radioButtons(
"dimension",
label = "Choose number of dimensions",
choices = c("2D", "3D"),
selected = "2D"
),
matrixInput(
"transform_mat",
label = "Input the transformation matrix",
value = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
rows = list(names = FALSE),
cols = list(names = FALSE),
class = "numeric",
copy = TRUE,
paste = TRUE
)
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",  plotlyOutput("plot")),
tabPanel("Null Space", verbatimTextOutput("null_space"), plotlyOutput("null_space_plot")),
tabPanel("Determinant", uiOutput("determinant")),
tabPanel(
"Gauss-Jordan",
tableOutput("gauss_matrix"),
tableOutput("gauss_identity"),
actionButton("rewind", "", icon = icon("fast-backward")),
actionButton("play", "", icon = icon("play")),
actionButton("advance", "", icon = icon("fast-forward"))
)
)
)
)
)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(write_determinant(input$transform_mat, dimension = input$dimension))
)
})
output$null_space <- renderPrint({
compute_null_space(input$transform_mat)
})
output$null_space_plot <- renderPlotly({
if (input$dimension == "2D") {
plot_null_space_2d(input$transform_mat)
} else {
plot_null_space_3d(input$transform_mat)
}
})
lower_triangular <- eventReactive(input$go, {
apply_gauss_3d(input$transform_mat)
})
output$gauss_matrix <- renderTable({
lower_triangular()
})
}
# Run shiny application
shinyApp(ui, server)
# Load packages
library(plotly)
library(purrr)
library(dplyr)
library(stringr)
library(shiny)
library(shinythemes)
library(shinyMatrix)
library(xtable)
# Source script
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
source("utils.R")
# Create user interface
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel(
headerPanel("Linear Transformations")
),
withMathJax(),
sidebarLayout(
sidebarPanel(
radioButtons(
"dimension",
label = "Choose number of dimensions",
choices = c("2D", "3D"),
selected = "2D"
),
matrixInput(
"transform_mat",
label = "Input the transformation matrix",
value = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
rows = list(names = FALSE),
cols = list(names = FALSE),
class = "numeric",
copy = TRUE,
paste = TRUE
)
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",  plotlyOutput("plot")),
tabPanel("Null Space", verbatimTextOutput("null_space"), plotlyOutput("null_space_plot")),
tabPanel("Determinant", uiOutput("determinant")),
tabPanel(
"Gauss-Jordan",
tableOutput("gauss_matrix"),
tableOutput("gauss_identity"),
actionButton("rewind", "", icon = icon("fast-backward")),
actionButton("play", "", icon = icon("play")),
actionButton("advance", "", icon = icon("fast-forward"))
)
)
)
)
)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(write_determinant(input$transform_mat, dimension = input$dimension))
)
})
output$null_space <- renderPrint({
compute_null_space(input$transform_mat)
})
output$null_space_plot <- renderPlotly({
if (input$dimension == "2D") {
plot_null_space_2d(input$transform_mat)
} else {
plot_null_space_3d(input$transform_mat)
}
})
lower_triangular <- eventReactive(input$go, {
apply_gauss_3d(input$transform_mat)
})
output$gauss_matrix <- renderTable({
input$transform_mat
})
}
# Run shiny application
shinyApp(ui, server)
# Source script
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
source("utils.R")
# Create user interface
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel(
headerPanel("Linear Transformations")
),
withMathJax(),
sidebarLayout(
sidebarPanel(
radioButtons(
"dimension",
label = "Choose number of dimensions",
choices = c("2D", "3D"),
selected = "2D"
),
matrixInput(
"transform_mat",
label = "Input the transformation matrix",
value = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
rows = list(names = FALSE),
cols = list(names = FALSE),
class = "numeric",
copy = TRUE,
paste = TRUE
)
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",  plotlyOutput("plot")),
tabPanel("Null Space", verbatimTextOutput("null_space"), plotlyOutput("null_space_plot")),
tabPanel("Determinant", uiOutput("determinant")),
tabPanel(
"Gauss-Jordan",
tableOutput("gauss_matrix"),
tableOutput("gauss_identity"),
actionButton("rewind", "", icon = icon("fast-backward")),
actionButton("play", "", icon = icon("play")),
actionButton("advance", "", icon = icon("fast-forward"))
)
)
)
)
)
# Define server function
server <- function(input, output, session) {
observeEvent(input$dimension, {
mat_options <- list(
"2D" = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = FALSE),
"3D" = matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3, byrow = FALSE)
)
updateMatrixInput(
session,
"transform_mat",
value = mat_options[[input$dimension]]
)
})
output$plot <- renderPlotly({
if (input$dimension == "2D") {
plots <- plot_2d(input$transform_mat)
} else {
plots <- plot_3d(input$transform_mat)
}
plots
})
output$determinant <- renderUI({
withMathJax(
helpText(write_determinant(input$transform_mat, dimension = input$dimension))
)
})
output$null_space <- renderPrint({
compute_null_space(input$transform_mat)
})
output$null_space_plot <- renderPlotly({
if (input$dimension == "2D") {
plot_null_space_2d(input$transform_mat)
} else {
plot_null_space_3d(input$transform_mat)
}
})
lower_triangular <- eventReactive(input$play, {
apply_gauss_3d(input$transform_mat)
})
output$gauss_matrix <- renderTable({
lower_triangular()
})
}
# Run shiny application
shinyApp(ui, server)
